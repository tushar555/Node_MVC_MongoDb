const Product = require('../model/product-model');
const { validationResult } = require('express-validator/check');
const { ObjectId } = require('mongodb');
const fileHelper = require('../util/file');

exports.getAddProducts = (req, res, next) => {

    res.render('admin/edit-product', {
        docTitle: 'Add Product', path: '/add-product', editing: false,
        hasError: false,
        errorMessage: null
    })
}


exports.postAddProducts = (req, res, next) => {
    console.log('HELLLLOOOO')
    let title = req.body.title
    let image = req.file
    let description = req.body.description
    let price = req.body.price
    let userId = req.user;
    const errors = validationResult(req);

    if (!image) {
        return res.status(422).render('admin/edit-product', {
            docTitle: 'Add Product', path: '/add-product', editing: false,
            hasError: true,
            errorMessage: "Invalid File Format",
            product: { title: title, description: description, price: price }
        })
    }


    if (!errors.isEmpty()) {
        return res.render('admin/edit-product', {
            docTitle: 'Add Product', path: '/add-product', editing: false,
            hasError: true,
            errorMessage: errors.array()[0].msg,
            product: { title: title, description: description, price: price }
        })
    }

    const imageUrl = image.path;
    const product = new Product({ title, price, description, imageUrl, userId })
    product.save().then(result => {
        //  console.log(result)
        res.redirect('/admin-all-products')
    }).catch((err) => {

        const error = new Error();
        error.httpStatusCode = 500;
        return next(error)
    })

}

exports.getEditProduct = (req, res, next) => {
    const edit = req.query.edit
    const id = req.params.productId
    //getProducts fn will be generated by sequelize get+ModelName
    // Product.findByPk(id)

    Product.findById(id).then((product) => {
        product.price = +product['price']

        res.render('admin/edit-product', {
            docTitle: 'Add Product', path: '/edit-product',
            editing: edit,
            product: product,
            errorMessage: null,
            hasError: false
        })
    })
    // req.user.getProducts({ where: { id: id } }).then(product => {


    // });

}


exports.postEditProductsDetails = (req, res, next) => {
    let title = req.body.title
    let image = req.file
    let price = req.body.price
    let description = req.body.description
    let id = req.body.id.trim()
    let edit = req.query.edit

    const errors = validationResult(req);
    if (!image) {
        return res.status(422).render('admin/edit-product', {
            docTitle: 'Add Product', path: '/add-product', editing: true,
            hasError: true,
            errorMessage: "Invalid File Format",
            product: { title: title, description: description, price: price }
        })
    }


    console.log(errors)
    if (!errors.isEmpty()) {
        return res.status(422).render('admin/edit-product', {
            docTitle: 'Edit Product', path: '/edit-product', editing: true,
            errorMessage: errors.array()[0].msg,
            hasError: true,
            product: { _id: id, title: title, description: description, price: price }
        })

    }

    Product.findById(id).then(product => {

        if (product.userId.toString() !== req.user._id.toString()) {
            res.redirect('/')
        }

        product.title = title;
        product.price = price;
        product.description = description;
        product.imageUrl = image.path;

        product.save().then(result => {
            res.redirect('/admin-all-products')
        })
    })
    // Product.findByPk(req.body.id).then(pro => {
    //     pro.title = req.body.title
    //     pro.imageUrl = req.body.imgUrl
    //     pro.price = req.body.price
    //     pro.description = req.body.description
    //     return pro.save();

    // }).then(() => {  })

}



exports.showAllAdminProducts = (req, res, next) => {

    Product.find({ userId: req.user._id }).then((products) => {

        res.render('admin/all-products', {
            docTitle: 'All Admin Products',
            path: '/admin-all-products',
            products: products,
            isProductavailable: products.length > 0


        })
    })


}


exports.postdeleteProductsDetails = (req, res, next) => {
    const productId = req.params.productId;
    Product.findById({ _id: productId }).then((pro) => {
        fileHelper.deleteFile(pro.imageUrl);
    })
    Product.deleteOne({ _id: productId, userId: req.user._id }).then((pr) => {
        console.log(pr)
        res.redirect('/admin-all-products')
    }).catch(err => {
        next(err)
    })

}

exports.postdeleteProduct = (req, res, next) => {
    const productId = req.params.productId;
    Product.findById({ _id: productId }).then((pro) => {
        fileHelper.deleteFile(pro.imageUrl);
    })
    Product.deleteOne({ _id: productId, userId: req.user._id }).then((pr) => {
        res.status(200).json({ "message": "Success" });
    }).catch(err => {
        res.status(500).json({ "message": "fail" });
    })

}
